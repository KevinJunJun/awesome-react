/**
 * Generated by Â∞èüêîÂ∞èüêîÂíïÂíïÂòö.
 */
"use strict";

const path = require("path");
path.isAbsolute = require('path-is-absolute');
require('es6-promise').polyfill();

const UglifyJsPlugin = require('uglifyjs-webpack-plugin');
const ExtractTextPlugin = require('extract-text-webpack-plugin');
const webpack = require("webpack");
const HtmlWebpackPlugin = require('html-webpack-plugin');
const SWPrecacheWebpackPlugin = require('sw-precache-webpack-plugin');
const CopyWebpackPlugin = require("copy-webpack-plugin");

const version = require('./package.json').version;

console.log(`Build using version ${version}\n`);

const config = {
    entry: {
        main:["./src/index.tsx"],

    },
    output: {
        path:  `${__dirname}/build/${new Date().toISOString().slice(0,10)}-${process.env.NODE_ENV}`,
        publicPath: "/",
        filename: process.env.NODE_ENV === 'development' ? "[name].js":"[name].[chunkhash].js",
        chunkFilename: process.env.NODE_ENV === 'development' ?"[name].js": '[name].[chunkhash].js'
    },
    module: {
        rules: [{
            test: /\.tsx?$/,
            use: ["awesome-typescript-loader"],
            exclude: path.resolve("node_modules")
        },{
            test: /\.css$/,
            use: ["style-loader",{
                loader:"css-loader",
                options:{
                    url:false,
                    sourceMap:true
                }
            }]


        },{
            test: /\.html$/,
            use: 'raw-loader'
        }]
    },
    plugins: [
        new ExtractTextPlugin({filename:'[name].[chunkhash].css'}),
        new HtmlWebpackPlugin({
            template: './src/index.html',
            inject: 'body'
        }),
        new webpack.DefinePlugin({
            'process.env.NODE_ENV': "'"+process.env.NODE_ENV+"'",
            'process.env.APP_VERSION': `"${version}"`
        }),
        new CopyWebpackPlugin([{
            from:`assets`,
            to:"assets"
        }]),
        new webpack.NamedModulesPlugin(),
        new webpack.optimize.CommonsChunkPlugin({
            name: ['vendor','runtime'], //https://medium.com/webpack/predictable-long-term-caching-with-webpack-d3eee1d3fa31
            minChunks: Infinity
        }),
    ],
    devServer:{
        contentBase: '.',
        stats:'minimal'
    },
    resolve:{
        extensions: [ '.js', '.ts', '.jsx', '.tsx', '.css', '.html'],
        modules:['node_modules'],
        alias: {
            react: path.resolve('./node_modules/react'),
            'react-dom': path.resolve('./node_modules/react-dom'),
            'redux-form': path.resolve('./node_modules/redux-form'),
            "redux":path.resolve('./node_modules/redux'),
            "immutable":path.resolve('./node_modules/immutable'),
            'ag-grid': path.resolve('./node_modules/ag-grid'),
            "bootstrap": path.resolve('./node_modules/bootstrap'),
            "ag-grid-react": path.resolve('./node_modules/ag-grid-react'),
            "react-redux":path.resolve('./node_modules/react-redux'),
            "whatwg-fetch": path.resolve('./node_modules/whatwg-fetch')
        },
    }
};

switch(process.env.NODE_ENV){
    case "development": {
        config.devtool = 'source-map';
        config.module.rules[0].use.unshift("react-hot-loader/webpack");
        config.entry.main.push('webpack-hot-middleware/client');
        config.entry.main.unshift('react-hot-loader/patch');
        config.plugins = config.plugins.concat([
            new webpack.HotModuleReplacementPlugin(),
            new webpack.NoEmitOnErrorsPlugin()
        ]);
        config.module.rules[1].use = ExtractTextPlugin.extract({fallback:'style-loader', use:[
            {
                loader:'css-loader',
                options:{
                    url:false,
                    sourceMap:true
                }
            }
        ]})
        break;
    }
    case "test": {
        config.devtool = 'eval-source-map';
        break;
    }
    case "production": {
        config.module.rules[1].use = ExtractTextPlugin.extract({fallback:'style-loader', use:[
            {
                loader:'css-loader',
                options:{
                    url:false,
                    sourceMap:true
                }
            }
        ]});
        config.plugins.push(
            new SWPrecacheWebpackPlugin(
                {
                    cacheId: 'chicken',
                    filename: 'sw.js',
                    staticFileGlobsIgnorePatterns: [/index\.html$/],
                    maximumFileSizeToCacheInBytes: 4194304,
                    mergeStaticsConfig: true,
                    minify: false,
                    runtimeCaching: [{
                        handler: 'cacheFirst',
                        urlPattern: /[.](mp3|woff|woff2|eot|svg|ttf)$/,
                    }],
                }
            )
        );
        config.plugins.push(new UglifyJsPlugin({
            sourceMap: true
        }));
        config.devtool = 'source-map';
        break;
    }
}

module.exports = config;