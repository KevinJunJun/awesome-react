/**
 * Generated by 小🐔小🐔咕咕嘚.
 */
import {InitApp,startHandlingError,IRouteConfig} from "guguder";
import {List,Map,Record,TypedMap} from "immutable";
import {Store} from "redux"
require("antd/dist/antd.css");
import createBrowserHistory from "history/createBrowserHistory";
import { reducer as reduxFormReducer } from "redux-form"
import {routerMiddleware, routerReducer} from "react-router-redux";
import "redux-schema-form/src/antd"
export type RootState = Record.TypedInstance<{
    todos:List<any>,
    form:any,
    billing:any,
    routing,

}>;

const reduxFormActionType = /^@@redux-form/;
const routerType = /^@@router/;


export const history = createBrowserHistory();

let logMiddleware;

if(ENV.ERROR_REPORTING_URL)
    logMiddleware = startHandlingError(recentActions=>e=>{
        global['dontsave']=true;
        fetch(ENV.ERROR_REPORTING_URL, {
            method: "POST",
            body: JSON.stringify({
                stack:e.stack,
                message:e.message,
                recentActions,
                isTest:true
            }),
            credentials:"include"
        });
    });
else
    logMiddleware = startHandlingError(recentActions=>e=>{
        console.error(e);
        global['dontsave']=true;
    });

const app = InitApp<RootState>({
    middlewares:[routerMiddleware(history),logMiddleware],
    reducers:[
        (state,action)=>{
            if(reduxFormActionType.test(action.type))
                return state.set('form',reduxFormReducer(state.form,action));
            else return state;
        },
        (state,action)=>{
            if(routerType.test(action.type))
                return state.set('routing',routerReducer(state.routing as any,action) as any);
            else return state;
        },

    ],
    initialState:{
        todos:List(),
        form:{},
        billing:Map(),
        routing:{},

    }
});

export const {ReduxComponent,ReduxService} = app;

const store:Store<RootState> = app.store;

export function getStore(){
    return app.store;
}